Hello, I am  1
Hello, I am  0
Hello, I am  2
data sent to node 1
data received on node 1 from node 0
data sent to node 2
data received on node 2 from node 0
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0,    0,    0,  ..., 1313, 1313, 1313],
        [ 320,  926, 1246,  ...,  299,  732, 1312]]) torch.Size([2, 5508])
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0,    0,    0,  ..., 1572, 1572, 1573],
        [   1,  321,  323,  ...,  100,  774,  653]]) torch.Size([2, 5860])
Rank 1 has requested data
Rank 2 has received tensor([ 677,  679,  680,  682,  684,  685,  688,  693,  694,  695,  697,  699,
         700,  701,  702,  703,  704,  706,  707,  709,  711,  712,  719,  720,
         721,  722,  725,  726,  728,  729,  730,  731,  734,  735,  736,  738,
         739,  741,  742,  747,  749,  750,  751,  754,  755,  761,  763,  765,
         767,  769,  770,  771,  772,  773,  777,  778,  779,  780,  784,  789,
         792,  793,  798,  799,  801,  803,  805,  807,  809,  810,  816,  822,
         826,  828,  830,  831,  832,  836,  837,  838,  839,  840,  842,  843,
         844,  847,  849,  850,  852,  854,  856,  857,  858,  859,  861,  864,
         865,  868,  870,  873,  878,  880,  884,  887,  891,  894,  895,  897,
         901,  903,  904,  905,  906,  907,  908,  910,  921,  923,  925,  928,
         930,  934,  935,  937,  939,  940,  941,  942,  943,  944,  945,  946,
         948,  954,  955,  956,  958,  959,  960,  961,  963,  964,  965,  969,
         971,  972,  973,  974,  980,  981,  982,  984,  988,  989,  992,  993,
         996,  997, 1000, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013,
        1014, 1016, 1022, 1025, 1028, 1029, 1030, 1032, 1034, 1036, 1042, 1045,
        1047, 1048, 1050, 1053, 1056, 1058, 1060, 1063, 1064, 1065, 1068, 1069,
        1071, 1072, 1075, 1077, 1080, 1081, 1083, 1086, 1087, 1088, 1089, 1090,
        1091, 1092, 1093, 1094, 1095, 1096, 1097, 1102, 1104, 1105, 1106, 1107,
        1109, 1111, 1112, 1113, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125,
        1128, 1129, 1131, 1133, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1144,
        1146, 1147, 1152, 1153, 1156, 1157, 1158, 1159, 1163, 1168, 1172, 1179,
        1180, 1182, 1183, 1186, 1187, 1188, 1191, 1193, 1194, 1195, 1196, 1197,
        1198, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1215, 1220, 1221,
        1222, 1224, 1225, 1226, 1228, 1230, 1231, 1232, 1234, 1235, 1236, 1237,
        1240, 1245, 1246, 1248, 1251, 1253, 1255, 1256, 1257, 1258, 1260, 1264,
        1267, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1279, 1282, 1283, 1285,
        1286, 1289, 1291, 1293, 1296, 1298, 1302, 1304, 1311, 1312, 1313, 1318,
        1319, 1320, 1321, 1325, 1326, 1330, 1333, 1335, 1336, 1337, 1341, 1342,
        1343, 1346, 1347, 1349, 1350, 1351, 1352, 1353])
Rank 2 index remapped to  tensor([ 677,  679,  680,  682,  684,  685,  688,  693,  694,  695,  697,  699,
         700,  701,  702,  703,  704,  706,  707,  709,  711,  712,  719,  720,
         721,  722,  725,  726,  728,  729,  730,  731,  734,  735,  736,  738,
         739,  741,  742,  747,  749,  750,  751,  754,  755,  761,  763,  765,
         767,  769,  770,  771,  772,  773,  777,  778,  779,  780,  784,  789,
         792,  793,  798,  799,  801,  803,  805,  807,  809,  810,  816,  822,
         826,  828,  830,  831,  832,  836,  837,  838,  839,  840,  842,  843,
         844,  847,  849,  850,  852,  854,  856,  857,  858,  859,  861,  864,
         865,  868,  870,  873,  878,  880,  884,  887,  891,  894,  895,  897,
         901,  903,  904,  905,  906,  907,  908,  910,  921,  923,  925,  928,
         930,  934,  935,  937,  939,  940,  941,  942,  943,  944,  945,  946,
         948,  954,  955,  956,  958,  959,  960,  961,  963,  964,  965,  969,
         971,  972,  973,  974,  980,  981,  982,  984,  988,  989,  992,  993,
         996,  997, 1000, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013,
        1014, 1016, 1022, 1025, 1028, 1029, 1030, 1032, 1034, 1036, 1042, 1045,
        1047, 1048, 1050, 1053, 1056, 1058, 1060, 1063, 1064, 1065, 1068, 1069,
        1071, 1072, 1075, 1077, 1080, 1081, 1083, 1086, 1087, 1088, 1089, 1090,
        1091, 1092, 1093, 1094, 1095, 1096, 1097, 1102, 1104, 1105, 1106, 1107,
        1109, 1111, 1112, 1113, 1115, 1117, 1118, 1119, 1121, 1122, 1124, 1125,
        1128, 1129, 1131, 1133, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1144,
        1146, 1147, 1152, 1153, 1156, 1157, 1158, 1159, 1163, 1168, 1172, 1179,
        1180, 1182, 1183, 1186, 1187, 1188, 1191, 1193, 1194, 1195, 1196, 1197,
        1198, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1215, 1220, 1221,
        1222, 1224, 1225, 1226, 1228, 1230, 1231, 1232, 1234, 1235, 1236, 1237,
        1240, 1245, 1246, 1248, 1251, 1253, 1255, 1256, 1257, 1258, 1260, 1264,
        1267, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1279, 1282, 1283, 1285,
        1286, 1289, 1291, 1293, 1296, 1298, 1302, 1304, 1311, 1312, 1313, 1318,
        1319, 1320, 1321, 1325, 1326, 1330, 1333, 1335, 1336, 1337, 1341, 1342,
        1343, 1346, 1347, 1349, 1350, 1351, 1352, 1353])
Rank 2 has sent requested data
GCN_Cora_Distributed_MulNode.py:107: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  send_object(torch.tensor(requested_nodes_list[i]), dst = 1)
Rank 1 has received tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
Rank 2 has requested data
Rank 1 has received tensor(679)
Rank 1 index remapped to  tensor(679)
Rank 2 has received tensor([0., 0., 0.,  ..., 0., 0., 0.])
before cat in rank  2 torch.Size([1354, 1433])
Rank 1 has sent requested data
before cat in rank  1 torch.Size([1354, 1433])
after cat in rank 1 torch.Size([1698, 1433])
Rank  1  has data  tensor([   0,    3,    5,  ..., 2634, 2632, 2630])
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 168, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 155, in main
    correct = float(pred[data.test_mask].eq(data.y[data.test_mask]).sum().item())
IndexError: The shape of the mask [1354] at index 0 does not match the shape of the indexed tensor [1698] at index 0
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 168, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 154, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 113, in forward
    x = torch.cat((x, requested_nodes_feature), dim = 0)
RuntimeError: Tensors must have same number of dimensions: got 2 and 1
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 275377
srun: error: node024: task 2: Exited with exit code 1
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 1080977
srun: error: node002: task 1: Exited with exit code 1
