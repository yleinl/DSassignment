Hello, I am  2
Hello, I am  1
Hello, I am  0
data sent to node 1
data received on node 1 from node 0
Range
[range(0, 1354), range(1354, 2708)]
data sent to node 2
data received on node 2 from node 0
requested_nodes_list
[[], [], [1358, 1363, 1365, 1374, 1375, 1385, 1397, 1399, 1400, 1411, 1424, 1425, 1426, 1434, 1439, 1443, 1447, 1455, 1458, 1473, 1476, 1478, 1485, 1504, 1514, 1521, 1533, 1538, 1539, 1540, 1544, 1546, 1550, 1555, 1556, 1561, 1566, 1578, 1590, 1594, 1595, 1598, 1603, 1608, 1611, 1617, 1636, 1645, 1647, 1662, 1667, 1672, 1673, 1675, 1686, 1716, 1741, 1761, 1766, 1770, 1781, 1784, 1789, 1802, 1819, 1826, 1829, 1834, 1838, 1839, 1840, 1847, 1855, 1861, 1888, 1892, 1900, 1908, 1909, 1911, 1935, 1946, 1950, 1954, 1978, 1988, 1990, 2009, 2012, 2034, 2038, 2039, 2042, 2046, 2051, 2053, 2055, 2074, 2081, 2089, 2093, 2096, 2097, 2112, 2115, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2129, 2134, 2136, 2144, 2145, 2147, 2151, 2157, 2163, 2164, 2165, 2166, 2167, 2168, 2173, 2175, 2177, 2178, 2180, 2182, 2219, 2221, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2254, 2259, 2260, 2278, 2282, 2287, 2294, 2295, 2305, 2311, 2318, 2327, 2329, 2333, 2341, 2362, 2373, 2375, 2382, 2389, 2390, 2396, 2402, 2408, 2412, 2413, 2422, 2433, 2437, 2444, 2445, 2463, 2467, 2477, 2483, 2490, 2491, 2503, 2504, 2520, 2532, 2545, 2597, 2598, 2599, 2600, 2602, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2621, 2622, 2623, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707]]
Range
[range(0, 1354), range(1354, 2708)]
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0,    0,    0,  ..., 2597, 2597, 2597],
        [ 356, 1053, 2680,  ...,   88,  336,  818]]) torch.Size([2, 6008])
world size 3
request nodes: 0
request nodes: 286
Rank 1 sending [1358, 1363, 1365, 1374, 1375, 1385, 1397, 1399, 1400, 1411, 1424, 1425, 1426, 1434, 1439, 1443, 1447, 1455, 1458, 1473, 1476, 1478, 1485, 1504, 1514, 1521, 1533, 1538, 1539, 1540, 1544, 1546, 1550, 1555, 1556, 1561, 1566, 1578, 1590, 1594, 1595, 1598, 1603, 1608, 1611, 1617, 1636, 1645, 1647, 1662, 1667, 1672, 1673, 1675, 1686, 1716, 1741, 1761, 1766, 1770, 1781, 1784, 1789, 1802, 1819, 1826, 1829, 1834, 1838, 1839, 1840, 1847, 1855, 1861, 1888, 1892, 1900, 1908, 1909, 1911, 1935, 1946, 1950, 1954, 1978, 1988, 1990, 2009, 2012, 2034, 2038, 2039, 2042, 2046, 2051, 2053, 2055, 2074, 2081, 2089, 2093, 2096, 2097, 2112, 2115, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2129, 2134, 2136, 2144, 2145, 2147, 2151, 2157, 2163, 2164, 2165, 2166, 2167, 2168, 2173, 2175, 2177, 2178, 2180, 2182, 2219, 2221, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2254, 2259, 2260, 2278, 2282, 2287, 2294, 2295, 2305, 2311, 2318, 2327, 2329, 2333, 2341, 2362, 2373, 2375, 2382, 2389, 2390, 2396, 2402, 2408, 2412, 2413, 2422, 2433, 2437, 2444, 2445, 2463, 2467, 2477, 2483, 2490, 2491, 2503, 2504, 2520, 2532, 2545, 2597, 2598, 2599, 2600, 2602, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2621, 2622, 2623, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707]
requested_nodes_list
[[], [0, 2, 3, 4, 6, 7, 8, 10, 12, 18, 20, 23, 30, 32, 33, 34, 35, 38, 42, 43, 45, 46, 48, 49, 52, 55, 57, 62, 64, 68, 72, 85, 88, 89, 92, 96, 97, 107, 109, 117, 120, 123, 126, 131, 134, 139, 143, 145, 150, 156, 159, 163, 165, 166, 171, 172, 177, 184, 186, 199, 200, 203, 206, 218, 223, 230, 232, 234, 240, 243, 249, 250, 252, 254, 259, 260, 261, 266, 269, 272, 275, 279, 280, 283, 285, 287, 288, 289, 292, 296, 298, 302, 307, 311, 315, 327, 328, 330, 335, 336, 340, 341, 348, 350, 352, 354, 360, 361, 362, 375, 379, 390, 393, 399, 404, 405, 407, 408, 409, 411, 416, 419, 420, 424, 434, 444, 445, 457, 467, 469, 471, 472, 474, 481, 485, 488, 491, 492, 498, 500, 502, 508, 510, 511, 518, 523, 529, 531, 534, 535, 538, 539, 540, 541, 550, 552, 558, 559, 566, 570, 576, 577, 583, 584, 588, 596, 597, 598, 599, 601, 615, 617, 618, 625, 626, 630, 631, 639, 643, 644, 648, 653, 663, 665, 668, 669, 671, 692, 693, 696, 700, 706, 710, 721, 722, 726, 728, 735, 736, 739, 745, 746, 751, 759, 761, 762, 766, 767, 768, 795, 797, 799, 803, 804, 805, 806, 816, 818, 826, 832, 839, 840, 844, 845, 846, 847, 857, 866, 878, 882, 887, 893, 894, 897, 900, 903, 910, 913, 924, 928, 931, 933, 937, 939, 941, 948, 952, 953, 956, 960, 963, 964, 968, 970, 977, 983, 988, 991, 999, 1017, 1021, 1026, 1041, 1042, 1053, 1060, 1066, 1070, 1071, 1075, 1080, 1083, 1085, 1092, 1094, 1106, 1107, 1108, 1116, 1118, 1121, 1124, 1125, 1128, 1129, 1130, 1131, 1157, 1158, 1162, 1164, 1179, 1183, 1200, 1208, 1219, 1223, 1225, 1239, 1242, 1245, 1266, 1269, 1270, 1284, 1287, 1294, 1297, 1305, 1307, 1310, 1315, 1317, 1335, 1343, 1346], []]
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 1.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0,    2,    3,  ..., 2597, 2597, 2597],
        [2680, 2097, 2702,  ...,  336,  818, 2598]]) torch.Size([2, 5460])
world size 3
request nodes: 316
Rank 1 has requested data
Rank 2 has received tensor([1358, 1363, 1365, 1374, 1375, 1385, 1397, 1399, 1400, 1411, 1424, 1425,
        1426, 1434, 1439, 1443, 1447, 1455, 1458, 1473, 1476, 1478, 1485, 1504,
        1514, 1521, 1533, 1538, 1539, 1540, 1544, 1546, 1550, 1555, 1556, 1561,
        1566, 1578, 1590, 1594, 1595, 1598, 1603, 1608, 1611, 1617, 1636, 1645,
        1647, 1662, 1667, 1672, 1673, 1675, 1686, 1716, 1741, 1761, 1766, 1770,
        1781, 1784, 1789, 1802, 1819, 1826, 1829, 1834, 1838, 1839, 1840, 1847,
        1855, 1861, 1888, 1892, 1900, 1908, 1909, 1911, 1935, 1946, 1950, 1954,
        1978, 1988, 1990, 2009, 2012, 2034, 2038, 2039, 2042, 2046, 2051, 2053,
        2055, 2074, 2081, 2089, 2093, 2096, 2097, 2112, 2115, 2117, 2118, 2119,
        2120, 2121, 2122, 2123, 2124, 2129, 2134, 2136, 2144, 2145, 2147, 2151,
        2157, 2163, 2164, 2165, 2166, 2167, 2168, 2173, 2175, 2177, 2178, 2180,
        2182, 2219, 2221, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2254, 2259,
        2260, 2278, 2282, 2287, 2294, 2295, 2305, 2311, 2318, 2327, 2329, 2333,
        2341, 2362, 2373, 2375, 2382, 2389, 2390, 2396, 2402, 2408, 2412, 2413,
        2422, 2433, 2437, 2444, 2445, 2463, 2467, 2477, 2483, 2490, 2491, 2503,
        2504, 2520, 2532, 2545, 2597, 2598, 2599, 2600, 2602, 2604, 2605, 2606,
        2607, 2608, 2609, 2610, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619,
        2621, 2622, 2623, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2634, 2635,
        2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647,
        2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659,
        2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671,
        2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2684,
        2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2694, 2695, 2696, 2697,
        2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707])
Rank 2 index remapped to  tensor([   4,    9,   11,   20,   21,   31,   43,   45,   46,   57,   70,   71,
          72,   80,   85,   89,   93,  101,  104,  119,  122,  124,  131,  150,
         160,  167,  179,  184,  185,  186,  190,  192,  196,  201,  202,  207,
         212,  224,  236,  240,  241,  244,  249,  254,  257,  263,  282,  291,
         293,  308,  313,  318,  319,  321,  332,  362,  387,  407,  412,  416,
         427,  430,  435,  448,  465,  472,  475,  480,  484,  485,  486,  493,
         501,  507,  534,  538,  546,  554,  555,  557,  581,  592,  596,  600,
         624,  634,  636,  655,  658,  680,  684,  685,  688,  692,  697,  699,
         701,  720,  727,  735,  739,  742,  743,  758,  761,  763,  764,  765,
         766,  767,  768,  769,  770,  775,  780,  782,  790,  791,  793,  797,
         803,  809,  810,  811,  812,  813,  814,  819,  821,  823,  824,  826,
         828,  865,  867,  878,  879,  880,  881,  882,  883,  884,  900,  905,
         906,  924,  928,  933,  940,  941,  951,  957,  964,  973,  975,  979,
         987, 1008, 1019, 1021, 1028, 1035, 1036, 1042, 1048, 1054, 1058, 1059,
        1068, 1079, 1083, 1090, 1091, 1109, 1113, 1123, 1129, 1136, 1137, 1149,
        1150, 1166, 1178, 1191, 1243, 1244, 1245, 1246, 1248, 1250, 1251, 1252,
        1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
        1267, 1268, 1269, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281,
        1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
        1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
        1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
        1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1330,
        1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1340, 1341, 1342, 1343,
        1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353])
Rank 2 has sent requested data
Rank 2 sending tensor(1363)
GCN_Cora_Distributed_MulNode.py:126: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  send_object(torch.tensor(requested_nodes_list[i]), dst = 1)
Rank 1 has received tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 1.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
Rank 2 has requested data
Rank 1 has received tensor(1363)
Rank 1 index remapped to  tensor(9)
Rank 2 has received tensor([0., 0., 0.,  ..., 0., 0., 0.])
before cat in rank  2 torch.Size([1354, 1433])
after cat in rank 2 torch.Size([1355, 1433])
Rank  2  has data  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 1.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 187, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 173, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 95, in forward
    print("request nodes:", len(requested_nodes_list[i]))
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/tensor.py", line 572, in __len__
Rank 1 has sent requested data
before cat in rank  1 torch.Size([1354, 1433])
    raise TypeError("len() of a 0-d tensor")
TypeError: len() of a 0-d tensor
after cat in rank 1 torch.Size([1640, 1433])
Rank  1  has data  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 1.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 187, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 173, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 138, in forward
    x = self.conv1(x, edge_index)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 19, in forward
    return self.propagate(edge_index, size=(x.size(0), x.size(0)), x=x)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 310, in propagate
    size, kwargs)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 202, in __collect__
    j if arg[-2:] == '_j' else i)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 171, in __lift__
    return src.index_select(self.node_dim, index)
IndexError: index out of range in self
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 291976
srun: error: node024: task 2: Exited with exit code 1
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 1097674
srun: error: node002: task 1: Exited with exit code 1
