Hello, I am  2
Hello, I am  1
Hello, I am  0
data sent to node 1
data received on node 1 from node 0
Range
[range(0, 1354), range(1354, 2708)]
data sent to node 2
data received on node 2 from node 0
Range
[range(0, 1354), range(1354, 2708)]
requested_nodes_list
[[], [], [1355, 1362, 1364, 1367, 1368, 1373, 1379, 1380, 1383, 1384, 1386, 1388, 1397, 1403, 1408, 1413, 1424, 1431, 1432, 1438, 1439, 1446, 1447, 1448, 1457, 1463, 1468, 1472, 1475, 1486, 1489, 1491, 1496, 1499, 1503, 1504, 1507, 1511, 1540, 1544, 1551, 1553, 1569, 1570, 1577, 1584, 1587, 1588, 1592, 1593, 1594, 1598, 1606, 1613, 1614, 1633, 1635, 1644, 1649, 1651, 1661, 1664, 1666, 1667, 1679, 1686, 1689, 1691, 1693, 1702, 1706, 1707, 1709, 1712, 1723, 1725, 1727, 1736, 1739, 1742, 1754, 1757, 1758, 1759, 1764, 1780, 1784, 1802, 1803, 1824, 1836, 1837, 1840, 1845, 1856, 1870, 1873, 1875, 1892, 1895, 1896, 1897, 1904, 1916, 1925, 1926, 1937, 1938, 1942, 1948, 1949, 1951, 1954, 1955, 1959, 1961, 1965, 1973, 1977, 1979, 1985, 1998, 1999, 2002, 2005, 2007, 2008, 2010, 2016, 2017, 2022, 2027, 2028, 2031, 2035, 2038, 2039, 2042, 2050, 2063, 2078, 2083, 2084, 2087, 2088, 2093, 2104, 2106, 2108, 2113, 2117, 2121, 2124, 2127, 2128, 2129, 2130, 2136, 2139, 2148, 2150, 2151, 2152, 2154, 2162, 2164, 2166, 2173, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2190, 2192, 2193, 2204, 2205, 2209, 2215, 2216, 2222, 2223, 2224, 2239, 2240, 2242, 2244, 2247, 2248, 2249, 2250, 2251, 2252, 2256, 2257, 2262, 2275, 2306, 2319, 2328, 2330, 2331, 2340, 2348, 2354, 2358, 2377, 2390, 2402, 2416, 2431, 2434, 2441, 2447, 2448, 2449, 2467, 2472, 2507, 2528, 2590, 2591, 2592, 2593, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2641, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707]]
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 1., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0,    0,    0,  ..., 2590, 2590, 2590],
        [ 341, 1033, 2666,  ...,   82,  321,  803]]) torch.Size([2, 6034])
world size 3
request nodes: 0
request nodes: 335
requested_nodes_list
[[], [0, 1, 2, 4, 7, 8, 15, 21, 23, 30, 32, 33, 35, 43, 45, 46, 47, 53, 56, 58, 68, 70, 71, 73, 81, 82, 83, 86, 91, 92, 101, 103, 104, 105, 107, 109, 113, 116, 119, 122, 126, 131, 133, 137, 138, 140, 141, 146, 151, 153, 154, 159, 161, 164, 174, 181, 182, 186, 189, 196, 199, 200, 202, 204, 212, 213, 216, 217, 222, 224, 225, 226, 232, 233, 237, 238, 240, 242, 243, 246, 250, 252, 253, 255, 260, 262, 264, 266, 270, 271, 272, 284, 290, 291, 294, 299, 302, 309, 312, 315, 320, 321, 324, 325, 328, 336, 337, 339, 346, 350, 352, 357, 377, 383, 386, 388, 389, 390, 391, 399, 405, 426, 431, 432, 441, 444, 445, 448, 451, 464, 468, 472, 474, 478, 484, 497, 501, 505, 506, 509, 514, 516, 518, 519, 539, 544, 549, 550, 553, 555, 561, 562, 563, 569, 571, 572, 580, 584, 588, 589, 590, 594, 597, 599, 600, 607, 608, 609, 612, 622, 626, 627, 629, 632, 634, 635, 637, 643, 644, 646, 653, 656, 658, 659, 660, 661, 662, 668, 675, 678, 681, 686, 687, 688, 691, 694, 696, 701, 703, 704, 713, 715, 720, 725, 739, 743, 746, 751, 753, 755, 756, 759, 760, 761, 766, 767, 780, 781, 784, 788, 794, 795, 803, 804, 807, 808, 817, 819, 825, 827, 830, 831, 832, 834, 835, 836, 838, 843, 847, 855, 857, 858, 861, 863, 865, 867, 872, 876, 880, 886, 898, 900, 907, 908, 912, 914, 917, 918, 919, 924, 926, 932, 934, 942, 943, 946, 950, 956, 957, 958, 959, 961, 964, 965, 969, 975, 980, 983, 990, 991, 996, 998, 1010, 1017, 1018, 1019, 1023, 1025, 1033, 1036, 1041, 1045, 1046, 1047, 1051, 1055, 1056, 1057, 1058, 1059, 1068, 1079, 1080, 1081, 1082, 1089, 1091, 1092, 1093, 1103, 1111, 1117, 1118, 1119, 1120, 1122, 1125, 1126, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1156, 1158, 1160, 1162, 1171, 1172, 1178, 1180, 1181, 1187, 1200, 1201, 1207, 1213, 1214, 1215, 1216, 1218, 1219, 1221, 1229, 1230, 1234, 1235, 1237, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1250, 1252, 1255, 1257, 1258, 1264, 1277, 1278, 1280, 1294, 1300, 1301, 1306, 1314, 1315, 1317, 1323, 1325, 1326, 1329, 1336, 1338, 1339, 1347], []]
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0, 1354, 1354,  ..., 2590, 2590, 2590],
        [2666, 1355, 1655,  ...,  321,  803, 2591]]) torch.Size([2, 5678])
world size 3
request nodes: 381
Rank 1 has requested data
Rank 2 has received tensor([1355, 1362, 1364, 1367, 1368, 1373, 1379, 1380, 1383, 1384, 1386, 1388,
        1397, 1403, 1408, 1413, 1424, 1431, 1432, 1438, 1439, 1446, 1447, 1448,
        1457, 1463, 1468, 1472, 1475, 1486, 1489, 1491, 1496, 1499, 1503, 1504,
        1507, 1511, 1540, 1544, 1551, 1553, 1569, 1570, 1577, 1584, 1587, 1588,
        1592, 1593, 1594, 1598, 1606, 1613, 1614, 1633, 1635, 1644, 1649, 1651,
        1661, 1664, 1666, 1667, 1679, 1686, 1689, 1691, 1693, 1702, 1706, 1707,
        1709, 1712, 1723, 1725, 1727, 1736, 1739, 1742, 1754, 1757, 1758, 1759,
        1764, 1780, 1784, 1802, 1803, 1824, 1836, 1837, 1840, 1845, 1856, 1870,
        1873, 1875, 1892, 1895, 1896, 1897, 1904, 1916, 1925, 1926, 1937, 1938,
        1942, 1948, 1949, 1951, 1954, 1955, 1959, 1961, 1965, 1973, 1977, 1979,
        1985, 1998, 1999, 2002, 2005, 2007, 2008, 2010, 2016, 2017, 2022, 2027,
        2028, 2031, 2035, 2038, 2039, 2042, 2050, 2063, 2078, 2083, 2084, 2087,
        2088, 2093, 2104, 2106, 2108, 2113, 2117, 2121, 2124, 2127, 2128, 2129,
        2130, 2136, 2139, 2148, 2150, 2151, 2152, 2154, 2162, 2164, 2166, 2173,
        2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
        2190, 2192, 2193, 2204, 2205, 2209, 2215, 2216, 2222, 2223, 2224, 2239,
        2240, 2242, 2244, 2247, 2248, 2249, 2250, 2251, 2252, 2256, 2257, 2262,
        2275, 2306, 2319, 2328, 2330, 2331, 2340, 2348, 2354, 2358, 2377, 2390,
        2402, 2416, 2431, 2434, 2441, 2447, 2448, 2449, 2467, 2472, 2507, 2528,
        2590, 2591, 2592, 2593, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602,
        2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2615, 2616,
        2617, 2618, 2619, 2620, 2621, 2622, 2623, 2625, 2626, 2627, 2628, 2629,
        2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2641, 2644, 2645,
        2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2656, 2657, 2658, 2659,
        2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671,
        2672, 2673, 2674, 2675, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684,
        2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696,
        2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707])
Rank 2 index remapped to  tensor([   1,    8,   10,   13,   14,   19,   25,   26,   29,   30,   32,   34,
          43,   49,   54,   59,   70,   77,   78,   84,   85,   92,   93,   94,
         103,  109,  114,  118,  121,  132,  135,  137,  142,  145,  149,  150,
         153,  157,  186,  190,  197,  199,  215,  216,  223,  230,  233,  234,
         238,  239,  240,  244,  252,  259,  260,  279,  281,  290,  295,  297,
         307,  310,  312,  313,  325,  332,  335,  337,  339,  348,  352,  353,
         355,  358,  369,  371,  373,  382,  385,  388,  400,  403,  404,  405,
         410,  426,  430,  448,  449,  470,  482,  483,  486,  491,  502,  516,
         519,  521,  538,  541,  542,  543,  550,  562,  571,  572,  583,  584,
         588,  594,  595,  597,  600,  601,  605,  607,  611,  619,  623,  625,
         631,  644,  645,  648,  651,  653,  654,  656,  662,  663,  668,  673,
         674,  677,  681,  684,  685,  688,  696,  709,  724,  729,  730,  733,
         734,  739,  750,  752,  754,  759,  763,  767,  770,  773,  774,  775,
         776,  782,  785,  794,  796,  797,  798,  800,  808,  810,  812,  819,
         821,  822,  823,  824,  825,  826,  827,  828,  829,  830,  831,  832,
         836,  838,  839,  850,  851,  855,  861,  862,  868,  869,  870,  885,
         886,  888,  890,  893,  894,  895,  896,  897,  898,  902,  903,  908,
         921,  952,  965,  974,  976,  977,  986,  994, 1000, 1004, 1023, 1036,
        1048, 1062, 1077, 1080, 1087, 1093, 1094, 1095, 1113, 1118, 1153, 1174,
        1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
        1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1262,
        1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275,
        1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1287, 1290, 1291,
        1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1302, 1303, 1304, 1305,
        1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
        1318, 1319, 1320, 1321, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
        1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
        1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353])
Rank 2 has sent requested data
GCN_Cora_Distributed_MulNode.py:124: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  send_object(torch.tensor(requested_nodes_list[i]), dst = 1)
Rank 1 has received tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
Rank 2 has requested data
Rank 1 has received tensor(1362)
Rank 1 index remapped to  tensor(8)
Rank 2 has received tensor([0., 0., 0.,  ..., 0., 0., 0.])
before cat in rank  2 torch.Size([1354, 1433])
after cat in rank 2 torch.Size([1355, 1433])
Rank  2  has data  tensor([1354, 1355, 1356,  ..., 2705, 2706, 2707])
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 185, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 171, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 95, in forward
    print("request nodes:", len(requested_nodes_list[i]))
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/tensor.py", line 572, in __len__
    raise TypeError("len() of a 0-d tensor")
TypeError: len() of a 0-d tensor
Rank 1 has sent requested data
before cat in rank  1 torch.Size([1354, 1433])
after cat in rank 1 torch.Size([1689, 1433])
Rank  1  has data  tensor([   0,    1,    2,  ..., 1351, 1352, 1353])
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 185, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 171, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 136, in forward
    x = self.conv1(x, edge_index)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 19, in forward
    return self.propagate(edge_index, size=(x.size(0), x.size(0)), x=x)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 310, in propagate
    size, kwargs)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 202, in __collect__
    j if arg[-2:] == '_j' else i)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 171, in __lift__
    return src.index_select(self.node_dim, index)
IndexError: index out of range in self
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 1097113
srun: error: node002: task 1: Exited with exit code 1
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 291438
srun: error: node024: task 2: Exited with exit code 1
