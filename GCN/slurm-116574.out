Hello, I am  2
Hello, I am  1
Hello, I am  0
data sent to node 1
data received on node 1 from node 0
data sent to node 2
data received on node 2 from node 0
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0,    0,    0,  ..., 1348, 1348, 1348],
        [ 330,  953, 1287,  ...,  309,  752, 1347]]) torch.Size([2, 5550])
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0,    0,    0,  ..., 1562, 1563, 1564],
        [   1,  310,  312,  ..., 1314,  633,  141]]) torch.Size([2, 5690])
Rank 1 has requested data
Rank 2 has received tensor([ 677,  678,  679,  680,  685,  688,  691,  693,  695,  697,  698,  699,
         700,  701,  705,  706,  707,  714,  715,  718,  719,  721,  724,  726,
         729,  731,  733,  734,  735,  736,  737,  738,  739,  740,  741,  746,
         747,  750,  751,  753,  759,  761,  763,  769,  771,  772,  773,  775,
         776,  780,  781,  782,  783,  787,  788,  789,  790,  791,  794,  795,
         802,  804,  805,  807,  808,  809,  810,  811,  812,  813,  814,  815,
         826,  829,  831,  832,  833,  835,  836,  837,  839,  840,  841,  847,
         851,  852,  854,  855,  856,  857,  858,  859,  861,  862,  863,  864,
         865,  866,  872,  875,  877,  879,  884,  886,  887,  890,  892,  893,
         896,  897,  900,  901,  903,  908,  910,  911,  912,  914,  916,  918,
         920,  922,  924,  934,  937,  938,  939,  942,  943,  946,  948,  949,
         954,  956,  958,  959,  962,  963,  964,  965,  966,  974,  979,  980,
         981,  982,  983,  984,  989,  990,  991,  994,  995,  996,  997, 1001,
        1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016,
        1018, 1020, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034,
        1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1056, 1060,
        1061, 1062, 1065, 1068, 1069, 1071, 1072, 1073, 1074, 1076, 1080, 1081,
        1082, 1085, 1087, 1088, 1089, 1091, 1094, 1096, 1097, 1098, 1099, 1104,
        1107, 1108, 1109, 1112, 1115, 1116, 1117, 1118, 1125, 1126, 1128, 1130,
        1134, 1135, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1152, 1153, 1156,
        1157, 1158, 1159, 1160, 1162, 1170, 1174, 1176, 1177, 1178, 1179, 1180,
        1184, 1186, 1190, 1192, 1193, 1194, 1196, 1197, 1198, 1200, 1202, 1204,
        1205, 1206, 1208, 1210, 1211, 1217, 1219, 1220, 1221, 1223, 1226, 1227,
        1230, 1231, 1234, 1236, 1237, 1239, 1240, 1241, 1245, 1246, 1248, 1251,
        1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1264, 1265, 1266, 1268,
        1269, 1270, 1272, 1274, 1275, 1278, 1279, 1286, 1288, 1289, 1293, 1294,
        1298, 1300, 1302, 1303, 1304, 1307, 1309, 1314, 1318, 1320, 1322, 1324,
        1329, 1330, 1331, 1334, 1335, 1336, 1337, 1338, 1340, 1342, 1343, 1344,
        1346, 1348, 1349, 1350, 1353])
Rank 2 index remapped to  tensor([ 677,  678,  679,  680,  685,  688,  691,  693,  695,  697,  698,  699,
         700,  701,  705,  706,  707,  714,  715,  718,  719,  721,  724,  726,
         729,  731,  733,  734,  735,  736,  737,  738,  739,  740,  741,  746,
         747,  750,  751,  753,  759,  761,  763,  769,  771,  772,  773,  775,
         776,  780,  781,  782,  783,  787,  788,  789,  790,  791,  794,  795,
         802,  804,  805,  807,  808,  809,  810,  811,  812,  813,  814,  815,
         826,  829,  831,  832,  833,  835,  836,  837,  839,  840,  841,  847,
         851,  852,  854,  855,  856,  857,  858,  859,  861,  862,  863,  864,
         865,  866,  872,  875,  877,  879,  884,  886,  887,  890,  892,  893,
         896,  897,  900,  901,  903,  908,  910,  911,  912,  914,  916,  918,
         920,  922,  924,  934,  937,  938,  939,  942,  943,  946,  948,  949,
         954,  956,  958,  959,  962,  963,  964,  965,  966,  974,  979,  980,
         981,  982,  983,  984,  989,  990,  991,  994,  995,  996,  997, 1001,
        1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016,
        1018, 1020, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034,
        1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1056, 1060,
        1061, 1062, 1065, 1068, 1069, 1071, 1072, 1073, 1074, 1076, 1080, 1081,
        1082, 1085, 1087, 1088, 1089, 1091, 1094, 1096, 1097, 1098, 1099, 1104,
        1107, 1108, 1109, 1112, 1115, 1116, 1117, 1118, 1125, 1126, 1128, 1130,
        1134, 1135, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1152, 1153, 1156,
        1157, 1158, 1159, 1160, 1162, 1170, 1174, 1176, 1177, 1178, 1179, 1180,
        1184, 1186, 1190, 1192, 1193, 1194, 1196, 1197, 1198, 1200, 1202, 1204,
        1205, 1206, 1208, 1210, 1211, 1217, 1219, 1220, 1221, 1223, 1226, 1227,
        1230, 1231, 1234, 1236, 1237, 1239, 1240, 1241, 1245, 1246, 1248, 1251,
        1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1264, 1265, 1266, 1268,
        1269, 1270, 1272, 1274, 1275, 1278, 1279, 1286, 1288, 1289, 1293, 1294,
        1298, 1300, 1302, 1303, 1304, 1307, 1309, 1314, 1318, 1320, 1322, 1324,
        1329, 1330, 1331, 1334, 1335, 1336, 1337, 1338, 1340, 1342, 1343, 1344,
        1346, 1348, 1349, 1350, 1353])
Rank2 has sent requested data
torch.Size([1354, 1433])
Rank1 has received tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
torch.Size([1354, 1433])
torch.Size([1354, 1433])
Rank  1  has data  tensor([   0,    3,    5,  ..., 2699, 2698, 2696])
torch.Size([1354]) 1354
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 155, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 141, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 100, in forward
    torch.cat((x, requested_nodes_feature), dim = 0)
TypeError: expected Tensor as element 1 in argument 0, but got NoneType
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 155, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 141, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 106, in forward
    x = self.conv1(x, edge_index)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 19, in forward
    return self.propagate(edge_index, size=(x.size(0), x.size(0)), x=x)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 310, in propagate
    size, kwargs)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 202, in __collect__
    j if arg[-2:] == '_j' else i)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 171, in __lift__
    return src.index_select(self.node_dim, index)
IndexError: index out of range in self
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 1080533
srun: error: node002: task 1: Exited with exit code 1
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 274935
srun: error: node024: task 2: Exited with exit code 1
