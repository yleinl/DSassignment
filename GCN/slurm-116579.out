Hello, I am  2
Hello, I am  1
Hello, I am  0
data sent to node 1
data received on node 1 from node 0
data sent to node 2
data received on node 2 from node 0
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 1., 0.],
        [1., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[   0,    0,    0,  ..., 1715, 1715, 1715],
        [ 358, 1035, 1642,  ...,   83,  338,  821]]) torch.Size([2, 6164])
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]]) torch.Size([1354, 1433])
tensor([[1354,    0,    0,  ..., 1203, 1203, 1203],
        [1289,    1,  281,  ..., 1485, 1640, 1204]]) torch.Size([2, 5710])
Rank 1 has requested data
Rank 2 has received tensor([ 677,  678,  679,  680,  682,  691,  693,  695,  697,  699,  700,  701,
         702,  705,  711,  712,  715,  718,  719,  721,  724,  725,  728,  729,
         731,  733,  734,  735,  736,  738,  739,  740,  741,  746,  747,  749,
         751,  759,  762,  769,  771,  772,  773,  775,  776,  777,  778,  779,
         780,  781,  785,  788,  790,  791,  794,  803,  809,  810,  811,  812,
         817,  821,  822,  829,  830,  831,  832,  833,  835,  836,  839,  841,
         846,  847,  850,  852,  854,  855,  857,  858,  859,  861,  862,  863,
         864,  865,  866,  872,  875,  877,  878,  880,  886,  887,  888,  892,
         895,  898,  900,  901,  907,  908,  910,  912,  913,  914,  916,  918,
         920,  921,  925,  928,  934,  935,  937,  938,  939,  942,  943,  945,
         948,  949,  954,  955,  958,  959,  962,  964,  965,  972,  973,  974,
         979,  981,  982,  983,  984,  990,  992,  993,  994, 1000, 1001, 1002,
        1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1020, 1021,
        1025, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1036, 1042, 1043, 1045,
        1047, 1048, 1049, 1054, 1056, 1062, 1065, 1068, 1069, 1072, 1073, 1074,
        1075, 1076, 1078, 1080, 1083, 1084, 1085, 1086, 1088, 1089, 1091, 1095,
        1096, 1097, 1098, 1099, 1101, 1104, 1105, 1107, 1108, 1112, 1115, 1116,
        1117, 1118, 1124, 1125, 1126, 1130, 1134, 1137, 1139, 1140, 1141, 1142,
        1144, 1146, 1156, 1159, 1160, 1163, 1165, 1170, 1176, 1177, 1180, 1184,
        1186, 1187, 1188, 1190, 1192, 1193, 1196, 1197, 1198, 1200, 1204, 1205,
        1210, 1211, 1213, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1228,
        1231, 1232, 1236, 1237, 1239, 1241, 1242, 1245, 1246, 1248, 1251, 1253,
        1256, 1258, 1261, 1265, 1270, 1272, 1274, 1275, 1278, 1279, 1285, 1286,
        1289, 1290, 1291, 1293, 1294, 1296, 1298, 1300, 1302, 1303, 1304, 1318,
        1319, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334,
        1335, 1336, 1337, 1340, 1344, 1346, 1348, 1351, 1352, 1353])
Rank 2 index remapped to  tensor([ 677,  678,  679,  680,  682,  691,  693,  695,  697,  699,  700,  701,
         702,  705,  711,  712,  715,  718,  719,  721,  724,  725,  728,  729,
         731,  733,  734,  735,  736,  738,  739,  740,  741,  746,  747,  749,
         751,  759,  762,  769,  771,  772,  773,  775,  776,  777,  778,  779,
         780,  781,  785,  788,  790,  791,  794,  803,  809,  810,  811,  812,
         817,  821,  822,  829,  830,  831,  832,  833,  835,  836,  839,  841,
         846,  847,  850,  852,  854,  855,  857,  858,  859,  861,  862,  863,
         864,  865,  866,  872,  875,  877,  878,  880,  886,  887,  888,  892,
         895,  898,  900,  901,  907,  908,  910,  912,  913,  914,  916,  918,
         920,  921,  925,  928,  934,  935,  937,  938,  939,  942,  943,  945,
         948,  949,  954,  955,  958,  959,  962,  964,  965,  972,  973,  974,
         979,  981,  982,  983,  984,  990,  992,  993,  994, 1000, 1001, 1002,
        1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1020, 1021,
        1025, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1036, 1042, 1043, 1045,
        1047, 1048, 1049, 1054, 1056, 1062, 1065, 1068, 1069, 1072, 1073, 1074,
        1075, 1076, 1078, 1080, 1083, 1084, 1085, 1086, 1088, 1089, 1091, 1095,
        1096, 1097, 1098, 1099, 1101, 1104, 1105, 1107, 1108, 1112, 1115, 1116,
        1117, 1118, 1124, 1125, 1126, 1130, 1134, 1137, 1139, 1140, 1141, 1142,
        1144, 1146, 1156, 1159, 1160, 1163, 1165, 1170, 1176, 1177, 1180, 1184,
        1186, 1187, 1188, 1190, 1192, 1193, 1196, 1197, 1198, 1200, 1204, 1205,
        1210, 1211, 1213, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1228,
        1231, 1232, 1236, 1237, 1239, 1241, 1242, 1245, 1246, 1248, 1251, 1253,
        1256, 1258, 1261, 1265, 1270, 1272, 1274, 1275, 1278, 1279, 1285, 1286,
        1289, 1290, 1291, 1293, 1294, 1296, 1298, 1300, 1302, 1303, 1304, 1318,
        1319, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1334,
        1335, 1336, 1337, 1340, 1344, 1346, 1348, 1351, 1352, 1353])
Rank 1 has received tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
Rank 2 has sent requested data
GCN_Cora_Distributed_MulNode.py:107: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  send_object(torch.tensor(requested_nodes_list[i]), dst = 1)
Rank 2 has requested data
Rank 1 has received tensor(678)
Rank 1 index remapped to  tensor(678)
Rank 2 has received tensor([0., 0., 0.,  ..., 0., 0., 0.])
before cat in rank  2 torch.Size([1354, 1433])
Rank 1 has sent requested data
before cat in rank  1 torch.Size([1354, 1433])
after cat in rank 1 torch.Size([1354, 1433])
Rank  1  has data  tensor([   0,    3,    5,  ..., 2466, 2467, 2468])
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 168, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 154, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 119, in forward
    x = self.conv1(x, edge_index)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 19, in forward
    return self.propagate(edge_index, size=(x.size(0), x.size(0)), x=x)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 310, in propagate
    size, kwargs)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 202, in __collect__
    j if arg[-2:] == '_j' else i)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch_geometric/nn/conv/message_passing.py", line 171, in __lift__
    return src.index_select(self.node_dim, index)
IndexError: index out of range in self
Traceback (most recent call last):
  File "GCN_Cora_Distributed_MulNode.py", line 168, in <module>
    main(rank, world_size, host_addr_full)
  File "GCN_Cora_Distributed_MulNode.py", line 154, in main
    _, pred = model(data).max(dim=1)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "GCN_Cora_Distributed_MulNode.py", line 113, in forward
    torch.cat((x, requested_nodes_feature), dim = 0)
RuntimeError: Tensors must have same number of dimensions: got 2 and 1
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 275218
srun: error: node024: task 2: Exited with exit code 1
Traceback (most recent call last):
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/dsys2352/miniconda3/envs/dist_GNN/lib/python3.6/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/dsys2352/miniconda3/envs/dist_GNN/bin/python', '-u', 'GCN_Cora_Distributed_MulNode.py']' returned non-zero exit status 1.
Killing subprocess 1080808
srun: error: node002: task 1: Exited with exit code 1
